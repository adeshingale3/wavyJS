{"version":3,"file":"index.cjs","sources":["../src/hooks/Cursor.tsx","../src/hooks/Fetch.tsx","../src/hooks/Hover.tsx","../src/hooks/SessionTimeout.tsx","../src/hooks/SpeechSynthesis.tsx","../src/hooks/Toggle.tsx","../src/components/Fading Patterns/FadingBG.tsx","../src/components/Scrolling Patterns/NameScroller.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst useCursor= () =>{\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    const updatePosition = (e: MouseEvent) => {\r\n      setPosition({ x: e.clientX, y: e.clientY });\r\n    };\r\n\r\n    window.addEventListener(\"mousemove\", updatePosition);\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", updatePosition);\r\n    };\r\n  }, []);\r\n\r\n  return position;\r\n}\r\nexport {useCursor};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useFetch = (url: string) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<unknown>(null);\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n\r\n    async function fetchData() {\r\n      try {\r\n        setLoading(true);\r\n        const response = await fetch(url);\r\n        if (!response.ok) throw new Error(\"Failed to fetch\");\r\n        const result = await response.json();\r\n        if (!isCancelled) setData(result);\r\n      } catch (err) {\r\n        if (!isCancelled) setError(err);\r\n      } finally {\r\n        if (!isCancelled) setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n  }, [url]);\r\n\r\n  return { data, loading, error };\r\n}\r\n\r\nexport { useFetch }\r\n","import { useState } from \"react\";\r\n\r\nconst useHover = () => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const eventHandlers = {\r\n    onMouseEnter: () => setIsHovered(true),\r\n    onMouseLeave: () => setIsHovered(false),\r\n  };\r\n\r\n  return [isHovered, eventHandlers] as const;\r\n}\r\n\r\nexport {useHover}","import { useEffect, useRef } from \"react\";\r\n\r\ntype UseSessionTimeoutProps = {\r\n  timeout: number; // In milliseconds\r\n  onTimeout: () => void;\r\n  warningTime?: number; // Optional warning before logout\r\n  onWarning?: () => void;\r\n};\r\n\r\nexport function useSessionTimeout({\r\n  timeout,\r\n  onTimeout,\r\n  warningTime = 0,\r\n  onWarning,\r\n}: UseSessionTimeoutProps) {\r\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n  const warningRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n  const resetTimers = () => {\r\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    if (warningRef.current) clearTimeout(warningRef.current);\r\n\r\n    if (warningTime > 0 && onWarning) {\r\n      warningRef.current = setTimeout(onWarning, timeout - warningTime);\r\n    }\r\n\r\n    timeoutRef.current = setTimeout(onTimeout, timeout);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const events = [\"mousemove\", \"keydown\", \"click\", \"touchstart\"];\r\n\r\n    const handleActivity = () => resetTimers();\r\n\r\n    for (const event of events) {\r\n      window.addEventListener(event, handleActivity);\r\n    }\r\n\r\n    resetTimers(); // Set initial timeout\r\n\r\n    return () => {\r\n      for (const event of events) {\r\n        window.removeEventListener(event, handleActivity);\r\n      }\r\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n      if (warningRef.current) clearTimeout(warningRef.current);\r\n    };\r\n  }, [timeout, onTimeout, warningTime, onWarning]);\r\n}\r\n","import { useCallback, useRef } from \"react\";\r\n\r\nconst useSpeechSynthesis = () => {\r\n  const synth = window.speechSynthesis;\r\n  const utteranceRef = useRef<SpeechSynthesisUtterance | null>(null);\r\n\r\n  const speak = useCallback((text: string, options: Partial<SpeechSynthesisUtterance> = {}) => {\r\n    if (!synth) return;\r\n\r\n    // Cancel any ongoing speech\r\n    synth.cancel();\r\n\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    Object.assign(utterance, options); // pitch, rate, voice, etc.\r\n    synth.speak(utterance);\r\n    utteranceRef.current = utterance;\r\n  }, [synth]);\r\n\r\n  const stop = useCallback(() => {\r\n    synth?.cancel();\r\n  }, [synth]);\r\n\r\n  return { speak, stop };\r\n}\r\n\r\nexport {useSpeechSynthesis}\r\n\r\n\r\n\r\n","import { useState, useCallback } from \"react\";\r\n\r\nfunction useToggle(initialValue = false) {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  const toggle = useCallback(() => {\r\n    setValue((prev) => !prev);\r\n  }, []);\r\n\r\n  return [value, toggle];\r\n}\r\nexport {useToggle}","import React, { useEffect } from 'react';\r\nimport gsap from 'gsap';\r\n\r\nexport interface FadingBGProps {\r\n  rows?: number;\r\n  cols?: number;\r\n  dotSize?: number;\r\n  dotColor?: string;\r\n  animationDuration?: number;\r\n}\r\n\r\nexport const FadingBG: React.FC<FadingBGProps> = ({\r\n  rows = 16,\r\n  cols = 18,\r\n  dotSize = 8,\r\n  dotColor = 'bg-white/40',\r\n  animationDuration = 1.5,\r\n}) => {\r\n  useEffect(() => {\r\n    const boxes = gsap.utils.toArray('.fading-box');\r\n\r\n    gsap.fromTo(\r\n      boxes,\r\n      { scale: 0, opacity: 0.3 },\r\n      {\r\n        scale: 1,\r\n        opacity: 0.8,\r\n        ease: 'power1.inOut',\r\n        repeat: -1,\r\n        yoyo: true,\r\n        duration: animationDuration,\r\n        stagger: {\r\n          each: 0.015,\r\n          from: 'center',\r\n        },\r\n      }\r\n    );\r\n  }, [animationDuration, rows, cols]);\r\n\r\n  return (\r\n<div className=\"fixed top-0 left-0 z-[-999] bg-black w-screen h-screen overflow-hidden\">      <div className=\"absolute inset-0 z-2 bg-radial from-transparent from-5% to-black\" />\r\n      <div\r\n        className=\"relative z-1 h-full w-full grid\"\r\n        style={{\r\n          gridTemplateColumns: `repeat(${cols}, 1fr)`,\r\n          gridTemplateRows: `repeat(${rows}, 1fr)`,\r\n        }}\r\n      >\r\n        {Array(rows * cols).fill(0).map((_, i) => (\r\n          <div\r\n            key={i}\r\n            className={`fading-box rounded-full ${dotColor}`}\r\n            style={{ width: dotSize, height: dotSize }}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nFadingBG.displayName = 'FadingBG';\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport gsap from \"gsap\";\r\n\r\nexport interface NameScrollerProps {\r\n  title?: string;\r\n  shadowSize?: \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\";\r\n  shadowColor?: string;\r\n  textColor?: string;\r\n  numberOfRows?: number;\r\n  baseDuration?: number;\r\n  className?: string;\r\n}\r\n\r\nconst NameScroller: React.FC<NameScrollerProps> = ({\r\n  title = \"WAVY JS\",\r\n  shadowSize = \"lg\",\r\n  shadowColor = \"white/80\",\r\n  textColor = \"black/30\",\r\n  numberOfRows = 6,\r\n  baseDuration = 12,\r\n  className = \"\"\r\n}) => {\r\n  const rowRefs = useRef<HTMLDivElement[]>([]);\r\n\r\n  // Helper function to parse color and opacity\r\n  const parseColor = (colorString: string) => {\r\n    if (colorString.includes('/')) {\r\n      const [color, opacity] = colorString.split('/');\r\n      return { color, opacity: parseFloat(opacity) / 100 };\r\n    }\r\n    return { color: colorString, opacity: 1 };\r\n  };\r\n\r\n  // Helper function to get shadow styles\r\n  const getShadowStyles = (size: string, color: string) => {\r\n    const { color: shadowColor, opacity } = parseColor(color);\r\n    \r\n    // Base shadow templates without opacity\r\n    const shadowTemplates = {\r\n      sm: '0 1px 2px 0',\r\n      md: '0 4px 6px -1px',\r\n      lg: '0 10px 15px -3px',\r\n      xl: '0 20px 25px -5px',\r\n      \"2xl\": '0 25px 50px -12px'\r\n    };\r\n\r\n    // Convert common color names to RGB values\r\n    const colorMap: Record<string, string> = {\r\n      'black': '0, 0, 0',\r\n      'white': '255, 255, 255',\r\n      'red': '239, 68, 68',\r\n      'blue': '59, 130, 246',\r\n      'green': '34, 197, 94',\r\n      'yellow': '234, 179, 8',\r\n      'purple': '147, 51, 234',\r\n      'pink': '236, 72, 153',\r\n      'gray': '107, 114, 128',\r\n      'indigo': '99, 102, 241',\r\n      'teal': '20, 184, 166',\r\n      'orange': '249, 115, 22',\r\n      'cyan': '6, 182, 212',\r\n      'lime': '132, 204, 22',\r\n      'emerald': '16, 185, 129',\r\n      'amber': '245, 158, 11',\r\n      'rose': '244, 63, 94',\r\n      'violet': '139, 92, 246',\r\n      'fuchsia': '217, 70, 239',\r\n      'sky': '14, 165, 233',\r\n      'slate': '100, 116, 139',\r\n      'zinc': '113, 113, 122',\r\n      'neutral': '115, 115, 115',\r\n      'stone': '120, 113, 108'\r\n    };\r\n\r\n    // Get the base shadow template\r\n    const shadowTemplate = shadowTemplates[size as keyof typeof shadowTemplates];\r\n    \r\n    let finalColor = '0, 0, 0'; // Default to black\r\n    \r\n    // Handle Tailwind color scale (e.g., blue-600)\r\n    if (shadowColor.includes('-')) {\r\n      const [colorName, scale] = shadowColor.split('-');\r\n      const baseColor = colorMap[colorName];\r\n      if (baseColor) {\r\n        finalColor = baseColor;\r\n      }\r\n    }\r\n    // Handle basic color names\r\n    else if (colorMap[shadowColor]) {\r\n      finalColor = colorMap[shadowColor];\r\n    }\r\n    // If it's a hex color, convert to RGB\r\n    else if (shadowColor.startsWith('#')) {\r\n      const hex = shadowColor.replace('#', '');\r\n      const r = parseInt(hex.substr(0, 2), 16);\r\n      const g = parseInt(hex.substr(2, 2), 16);\r\n      const b = parseInt(hex.substr(4, 2), 16);\r\n      finalColor = `${r}, ${g}, ${b}`;\r\n    }\r\n    // If it's already an RGB format, extract the values\r\n    else if (shadowColor.startsWith('rgb')) {\r\n      finalColor = shadowColor.replace('rgb', '').replace('rgba', '').replace('(', '').replace(')', '');\r\n    }\r\n\r\n    // Return the final shadow with the correct color and opacity\r\n    return `${shadowTemplate} rgba(${finalColor}, ${opacity})`;\r\n  };\r\n\r\n  // Helper function to get text color with opacity support\r\n  const getTextColor = (colorString: string) => {\r\n    const { color, opacity } = parseColor(colorString);\r\n    \r\n    const colorMap: Record<string, string> = {\r\n      'black': '0, 0, 0',\r\n      'white': '255, 255, 255',\r\n      'red': '239, 68, 68',\r\n      'blue': '59, 130, 246',\r\n      'green': '34, 197, 94',\r\n      'yellow': '234, 179, 8',\r\n      'purple': '147, 51, 234',\r\n      'pink': '236, 72, 153',\r\n      'gray': '107, 114, 128',\r\n      'indigo': '99, 102, 241',\r\n      'teal': '20, 184, 166',\r\n      'orange': '249, 115, 22',\r\n      'cyan': '6, 182, 212',\r\n      'lime': '132, 204, 22',\r\n      'emerald': '16, 185, 129',\r\n      'amber': '245, 158, 11',\r\n      'rose': '244, 63, 94',\r\n      'violet': '139, 92, 246',\r\n      'fuchsia': '217, 70, 239',\r\n      'sky': '14, 165, 233',\r\n      'slate': '100, 116, 139',\r\n      'zinc': '113, 113, 122',\r\n      'neutral': '115, 115, 115',\r\n      'stone': '120, 113, 108'\r\n    };\r\n\r\n    // Handle Tailwind color scale (e.g., blue-600)\r\n    if (color.includes('-')) {\r\n      const [colorName, scale] = color.split('-');\r\n      const baseColor = colorMap[colorName];\r\n      if (baseColor) {\r\n        // For now, return the base color. You can expand this for more accurate scaling\r\n        return `rgba(${baseColor}, ${opacity})`;\r\n      }\r\n    }\r\n\r\n    // Handle basic color names\r\n    if (colorMap[color]) {\r\n      return `rgba(${colorMap[color]}, ${opacity})`;\r\n    }\r\n\r\n    // If it's a hex color, convert to RGBA\r\n    if (color.startsWith('#')) {\r\n      const hex = color.replace('#', '');\r\n      const r = parseInt(hex.substr(0, 2), 16);\r\n      const g = parseInt(hex.substr(2, 2), 16);\r\n      const b = parseInt(hex.substr(4, 2), 16);\r\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n    }\r\n\r\n    // If it's already an RGB/RGBA format, return as is\r\n    if (color.startsWith('rgb')) {\r\n      return color;\r\n    }\r\n\r\n    // Default fallback\r\n    return color;\r\n  };\r\n\r\n  useEffect(() => {\r\n    rowRefs.current.forEach((row, index) => {\r\n      if (!row) return;\r\n\r\n      const totalWidth = row.scrollWidth / 2;\r\n      const isEvenRow = index % 2 === 0;\r\n      \r\n      // Alternate speeds: even rows are faster, odd rows are slower\r\n      const duration = isEvenRow ? baseDuration : baseDuration * 1.8;\r\n\r\n      // All rows move to the left (right to left)\r\n      gsap.fromTo(row,\r\n        { x: 0 },\r\n        {\r\n          x: -totalWidth,\r\n          duration: duration,\r\n          ease: \"linear\",\r\n          repeat: -1,\r\n          modifiers: {\r\n            x: (x) => {\r\n              const num = parseFloat(x);\r\n              return `${((num % -totalWidth) - totalWidth) % -totalWidth}px`;\r\n            },\r\n          },\r\n        }\r\n      );\r\n    });\r\n  }, [baseDuration]);\r\n\r\n  const textSet = Array.from({ length: 8 }).map((_, idx) => (\r\n    <h1 \r\n      key={idx} \r\n      className=\"text-8xl md:text-9xl font-bold mx-6 md:mx-8 whitespace-nowrap\"\r\n      style={{\r\n        color: getTextColor(textColor),\r\n        textShadow: getShadowStyles(shadowSize, shadowColor)\r\n      }}\r\n    >\r\n      {title}\r\n    </h1>\r\n  ));\r\n\r\n  const rows = Array.from({ length: numberOfRows }).map((_, rowIndex) => (\r\n    <div\r\n      key={rowIndex}\r\n      ref={(el) => {\r\n        if (el) rowRefs.current[rowIndex] = el;\r\n      }}\r\n      className=\"flex whitespace-nowrap\"\r\n      style={{ willChange: \"transform\" }}\r\n    >\r\n      {textSet}\r\n      {textSet} {/* Duplicate for seamless loop */}\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div className={`relative z-[-999] w-full h-screen bg-black overflow-hidden flex flex-col justify-center gap-6 md:gap-10 ${className}`}>\r\n      {rows}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NameScroller;\r\n"],"names":["useCursor","position","setPosition","useState","useEffect","updatePosition","e","useFetch","url","data","setData","loading","setLoading","error","setError","isCancelled","fetchData","response","result","err","useHover","isHovered","setIsHovered","useSessionTimeout","timeout","onTimeout","warningTime","onWarning","timeoutRef","useRef","warningRef","resetTimers","events","handleActivity","event","useSpeechSynthesis","synth","utteranceRef","speak","useCallback","text","options","utterance","stop","useToggle","initialValue","value","setValue","toggle","prev","FadingBG","rows","cols","dotSize","dotColor","animationDuration","boxes","gsap","jsxs","jsx","_","i","NameScroller","title","shadowSize","shadowColor","textColor","numberOfRows","baseDuration","className","rowRefs","parseColor","colorString","color","opacity","getShadowStyles","size","shadowTemplates","colorMap","shadowTemplate","finalColor","colorName","scale","baseColor","hex","r","g","b","getTextColor","row","index","totalWidth","duration","x","textSet","idx","rowIndex","el"],"mappings":"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"}