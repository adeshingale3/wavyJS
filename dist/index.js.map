{"version":3,"file":"index.js","sources":["../src/hooks/Cursor.tsx","../src/hooks/Fetch.tsx","../src/hooks/Hover.tsx","../src/hooks/SessionTimeout.tsx","../src/hooks/SpeechSynthesis.tsx","../src/hooks/Toggle.tsx","../src/components/Fading Patterns/FadingBG.tsx","../src/components/Scrolling Patterns/NameScroller.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst useCursor= () =>{\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    const updatePosition = (e: MouseEvent) => {\r\n      setPosition({ x: e.clientX, y: e.clientY });\r\n    };\r\n\r\n    window.addEventListener(\"mousemove\", updatePosition);\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", updatePosition);\r\n    };\r\n  }, []);\r\n\r\n  return position;\r\n}\r\nexport {useCursor};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useFetch = (url: string) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<unknown>(null);\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n\r\n    async function fetchData() {\r\n      try {\r\n        setLoading(true);\r\n        const response = await fetch(url);\r\n        if (!response.ok) throw new Error(\"Failed to fetch\");\r\n        const result = await response.json();\r\n        if (!isCancelled) setData(result);\r\n      } catch (err) {\r\n        if (!isCancelled) setError(err);\r\n      } finally {\r\n        if (!isCancelled) setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n  }, [url]);\r\n\r\n  return { data, loading, error };\r\n}\r\n\r\nexport { useFetch }\r\n","import { useState } from \"react\";\r\n\r\nconst useHover = () => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const eventHandlers = {\r\n    onMouseEnter: () => setIsHovered(true),\r\n    onMouseLeave: () => setIsHovered(false),\r\n  };\r\n\r\n  return [isHovered, eventHandlers] as const;\r\n}\r\n\r\nexport {useHover}","import { useEffect, useRef } from \"react\";\r\n\r\ntype UseSessionTimeoutProps = {\r\n  timeout: number; // In milliseconds\r\n  onTimeout: () => void;\r\n  warningTime?: number; // Optional warning before logout\r\n  onWarning?: () => void;\r\n};\r\n\r\nexport function useSessionTimeout({\r\n  timeout,\r\n  onTimeout,\r\n  warningTime = 0,\r\n  onWarning,\r\n}: UseSessionTimeoutProps) {\r\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n  const warningRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n  const resetTimers = () => {\r\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    if (warningRef.current) clearTimeout(warningRef.current);\r\n\r\n    if (warningTime > 0 && onWarning) {\r\n      warningRef.current = setTimeout(onWarning, timeout - warningTime);\r\n    }\r\n\r\n    timeoutRef.current = setTimeout(onTimeout, timeout);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const events = [\"mousemove\", \"keydown\", \"click\", \"touchstart\"];\r\n\r\n    const handleActivity = () => resetTimers();\r\n\r\n    for (const event of events) {\r\n      window.addEventListener(event, handleActivity);\r\n    }\r\n\r\n    resetTimers(); // Set initial timeout\r\n\r\n    return () => {\r\n      for (const event of events) {\r\n        window.removeEventListener(event, handleActivity);\r\n      }\r\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n      if (warningRef.current) clearTimeout(warningRef.current);\r\n    };\r\n  }, [timeout, onTimeout, warningTime, onWarning]);\r\n}\r\n","import { useCallback, useRef } from \"react\";\r\n\r\nconst useSpeechSynthesis = () => {\r\n  const synth = window.speechSynthesis;\r\n  const utteranceRef = useRef<SpeechSynthesisUtterance | null>(null);\r\n\r\n  const speak = useCallback((text: string, options: Partial<SpeechSynthesisUtterance> = {}) => {\r\n    if (!synth) return;\r\n\r\n    // Cancel any ongoing speech\r\n    synth.cancel();\r\n\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    Object.assign(utterance, options); // pitch, rate, voice, etc.\r\n    synth.speak(utterance);\r\n    utteranceRef.current = utterance;\r\n  }, [synth]);\r\n\r\n  const stop = useCallback(() => {\r\n    synth?.cancel();\r\n  }, [synth]);\r\n\r\n  return { speak, stop };\r\n}\r\n\r\nexport {useSpeechSynthesis}\r\n\r\n\r\n\r\n","import { useState, useCallback } from \"react\";\r\n\r\nfunction useToggle(initialValue = false) {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  const toggle = useCallback(() => {\r\n    setValue((prev) => !prev);\r\n  }, []);\r\n\r\n  return [value, toggle];\r\n}\r\nexport {useToggle}","import React, { useEffect } from 'react';\r\nimport gsap from 'gsap';\r\n\r\nexport interface FadingBGProps {\r\n  rows?: number;\r\n  cols?: number;\r\n  dotSize?: number;\r\n  dotColor?: string;\r\n  animationDuration?: number;\r\n}\r\n\r\nexport const FadingBG: React.FC<FadingBGProps> = ({\r\n  rows = 16,\r\n  cols = 18,\r\n  dotSize = 8,\r\n  dotColor = 'bg-white/40',\r\n  animationDuration = 1.5,\r\n}) => {\r\n  useEffect(() => {\r\n    const boxes = gsap.utils.toArray('.fading-box');\r\n\r\n    gsap.fromTo(\r\n      boxes,\r\n      { scale: 0, opacity: 0.3 },\r\n      {\r\n        scale: 1,\r\n        opacity: 0.8,\r\n        ease: 'power1.inOut',\r\n        repeat: -1,\r\n        yoyo: true,\r\n        duration: animationDuration,\r\n        stagger: {\r\n          each: 0.015,\r\n          from: 'center',\r\n        },\r\n      }\r\n    );\r\n  }, [animationDuration, rows, cols]);\r\n\r\n  return (\r\n<div className=\"fixed top-0 left-0 z-[-999] bg-black w-screen h-screen overflow-hidden\">      <div className=\"absolute inset-0 z-2 bg-radial from-transparent from-5% to-black\" />\r\n      <div\r\n        className=\"relative z-1 h-full w-full grid\"\r\n        style={{\r\n          gridTemplateColumns: `repeat(${cols}, 1fr)`,\r\n          gridTemplateRows: `repeat(${rows}, 1fr)`,\r\n        }}\r\n      >\r\n        {Array(rows * cols).fill(0).map((_, i) => (\r\n          <div\r\n            key={i}\r\n            className={`fading-box rounded-full ${dotColor}`}\r\n            style={{ width: dotSize, height: dotSize }}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nFadingBG.displayName = 'FadingBG';\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport gsap from \"gsap\";\r\n\r\nexport interface NameScrollerProps {\r\n  title?: string;\r\n  shadowSize?: \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\";\r\n  shadowColor?: string;\r\n  textColor?: string;\r\n  numberOfRows?: number;\r\n  baseDuration?: number;\r\n  className?: string;\r\n}\r\n\r\nconst NameScroller: React.FC<NameScrollerProps> = ({\r\n  title = \"WAVY JS\",\r\n  shadowSize = \"lg\",\r\n  shadowColor = \"white/80\",\r\n  textColor = \"black/30\",\r\n  numberOfRows = 6,\r\n  baseDuration = 12,\r\n  className = \"\"\r\n}) => {\r\n  const rowRefs = useRef<HTMLDivElement[]>([]);\r\n\r\n  // Helper function to parse color and opacity\r\n  const parseColor = (colorString: string) => {\r\n    if (colorString.includes('/')) {\r\n      const [color, opacity] = colorString.split('/');\r\n      return { color, opacity: parseFloat(opacity) / 100 };\r\n    }\r\n    return { color: colorString, opacity: 1 };\r\n  };\r\n\r\n  // Helper function to get shadow styles\r\n  const getShadowStyles = (size: string, color: string) => {\r\n    const { color: shadowColor, opacity } = parseColor(color);\r\n    \r\n    // Base shadow templates without opacity\r\n    const shadowTemplates = {\r\n      sm: '0 1px 2px 0',\r\n      md: '0 4px 6px -1px',\r\n      lg: '0 10px 15px -3px',\r\n      xl: '0 20px 25px -5px',\r\n      \"2xl\": '0 25px 50px -12px'\r\n    };\r\n\r\n    // Convert common color names to RGB values\r\n    const colorMap: Record<string, string> = {\r\n      'black': '0, 0, 0',\r\n      'white': '255, 255, 255',\r\n      'red': '239, 68, 68',\r\n      'blue': '59, 130, 246',\r\n      'green': '34, 197, 94',\r\n      'yellow': '234, 179, 8',\r\n      'purple': '147, 51, 234',\r\n      'pink': '236, 72, 153',\r\n      'gray': '107, 114, 128',\r\n      'indigo': '99, 102, 241',\r\n      'teal': '20, 184, 166',\r\n      'orange': '249, 115, 22',\r\n      'cyan': '6, 182, 212',\r\n      'lime': '132, 204, 22',\r\n      'emerald': '16, 185, 129',\r\n      'amber': '245, 158, 11',\r\n      'rose': '244, 63, 94',\r\n      'violet': '139, 92, 246',\r\n      'fuchsia': '217, 70, 239',\r\n      'sky': '14, 165, 233',\r\n      'slate': '100, 116, 139',\r\n      'zinc': '113, 113, 122',\r\n      'neutral': '115, 115, 115',\r\n      'stone': '120, 113, 108'\r\n    };\r\n\r\n    // Get the base shadow template\r\n    const shadowTemplate = shadowTemplates[size as keyof typeof shadowTemplates];\r\n    \r\n    let finalColor = '0, 0, 0'; // Default to black\r\n    \r\n    // Handle Tailwind color scale (e.g., blue-600)\r\n    if (shadowColor.includes('-')) {\r\n      const [colorName, scale] = shadowColor.split('-');\r\n      const baseColor = colorMap[colorName];\r\n      if (baseColor) {\r\n        finalColor = baseColor;\r\n      }\r\n    }\r\n    // Handle basic color names\r\n    else if (colorMap[shadowColor]) {\r\n      finalColor = colorMap[shadowColor];\r\n    }\r\n    // If it's a hex color, convert to RGB\r\n    else if (shadowColor.startsWith('#')) {\r\n      const hex = shadowColor.replace('#', '');\r\n      const r = parseInt(hex.substr(0, 2), 16);\r\n      const g = parseInt(hex.substr(2, 2), 16);\r\n      const b = parseInt(hex.substr(4, 2), 16);\r\n      finalColor = `${r}, ${g}, ${b}`;\r\n    }\r\n    // If it's already an RGB format, extract the values\r\n    else if (shadowColor.startsWith('rgb')) {\r\n      finalColor = shadowColor.replace('rgb', '').replace('rgba', '').replace('(', '').replace(')', '');\r\n    }\r\n\r\n    // Return the final shadow with the correct color and opacity\r\n    return `${shadowTemplate} rgba(${finalColor}, ${opacity})`;\r\n  };\r\n\r\n  // Helper function to get text color with opacity support\r\n  const getTextColor = (colorString: string) => {\r\n    const { color, opacity } = parseColor(colorString);\r\n    \r\n    const colorMap: Record<string, string> = {\r\n      'black': '0, 0, 0',\r\n      'white': '255, 255, 255',\r\n      'red': '239, 68, 68',\r\n      'blue': '59, 130, 246',\r\n      'green': '34, 197, 94',\r\n      'yellow': '234, 179, 8',\r\n      'purple': '147, 51, 234',\r\n      'pink': '236, 72, 153',\r\n      'gray': '107, 114, 128',\r\n      'indigo': '99, 102, 241',\r\n      'teal': '20, 184, 166',\r\n      'orange': '249, 115, 22',\r\n      'cyan': '6, 182, 212',\r\n      'lime': '132, 204, 22',\r\n      'emerald': '16, 185, 129',\r\n      'amber': '245, 158, 11',\r\n      'rose': '244, 63, 94',\r\n      'violet': '139, 92, 246',\r\n      'fuchsia': '217, 70, 239',\r\n      'sky': '14, 165, 233',\r\n      'slate': '100, 116, 139',\r\n      'zinc': '113, 113, 122',\r\n      'neutral': '115, 115, 115',\r\n      'stone': '120, 113, 108'\r\n    };\r\n\r\n    // Handle Tailwind color scale (e.g., blue-600)\r\n    if (color.includes('-')) {\r\n      const [colorName, scale] = color.split('-');\r\n      const baseColor = colorMap[colorName];\r\n      if (baseColor) {\r\n        // For now, return the base color. You can expand this for more accurate scaling\r\n        return `rgba(${baseColor}, ${opacity})`;\r\n      }\r\n    }\r\n\r\n    // Handle basic color names\r\n    if (colorMap[color]) {\r\n      return `rgba(${colorMap[color]}, ${opacity})`;\r\n    }\r\n\r\n    // If it's a hex color, convert to RGBA\r\n    if (color.startsWith('#')) {\r\n      const hex = color.replace('#', '');\r\n      const r = parseInt(hex.substr(0, 2), 16);\r\n      const g = parseInt(hex.substr(2, 2), 16);\r\n      const b = parseInt(hex.substr(4, 2), 16);\r\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n    }\r\n\r\n    // If it's already an RGB/RGBA format, return as is\r\n    if (color.startsWith('rgb')) {\r\n      return color;\r\n    }\r\n\r\n    // Default fallback\r\n    return color;\r\n  };\r\n\r\n  useEffect(() => {\r\n    rowRefs.current.forEach((row, index) => {\r\n      if (!row) return;\r\n\r\n      const totalWidth = row.scrollWidth / 2;\r\n      const isEvenRow = index % 2 === 0;\r\n      \r\n      // Alternate speeds: even rows are faster, odd rows are slower\r\n      const duration = isEvenRow ? baseDuration : baseDuration * 1.8;\r\n\r\n      // All rows move to the left (right to left)\r\n      gsap.fromTo(row,\r\n        { x: 0 },\r\n        {\r\n          x: -totalWidth,\r\n          duration: duration,\r\n          ease: \"linear\",\r\n          repeat: -1,\r\n          modifiers: {\r\n            x: (x) => {\r\n              const num = parseFloat(x);\r\n              return `${((num % -totalWidth) - totalWidth) % -totalWidth}px`;\r\n            },\r\n          },\r\n        }\r\n      );\r\n    });\r\n  }, [baseDuration]);\r\n\r\n  const textSet = Array.from({ length: 8 }).map((_, idx) => (\r\n    <h1 \r\n      key={idx} \r\n      className=\"text-8xl md:text-9xl font-bold mx-6 md:mx-8 whitespace-nowrap\"\r\n      style={{\r\n        color: getTextColor(textColor),\r\n        textShadow: getShadowStyles(shadowSize, shadowColor)\r\n      }}\r\n    >\r\n      {title}\r\n    </h1>\r\n  ));\r\n\r\n  const rows = Array.from({ length: numberOfRows }).map((_, rowIndex) => (\r\n    <div\r\n      key={rowIndex}\r\n      ref={(el) => {\r\n        if (el) rowRefs.current[rowIndex] = el;\r\n      }}\r\n      className=\"flex whitespace-nowrap\"\r\n      style={{ willChange: \"transform\" }}\r\n    >\r\n      {textSet}\r\n      {textSet} {/* Duplicate for seamless loop */}\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div className={`relative z-[-999] w-full h-screen bg-black overflow-hidden flex flex-col justify-center gap-6 md:gap-10 ${className}`}>\r\n      {rows}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NameScroller;\r\n"],"names":["useCursor","position","setPosition","useState","useEffect","updatePosition","e","useFetch","url","data","setData","loading","setLoading","error","setError","isCancelled","fetchData","response","result","err","useHover","isHovered","setIsHovered","useSessionTimeout","timeout","onTimeout","warningTime","onWarning","timeoutRef","useRef","warningRef","resetTimers","events","handleActivity","event","useSpeechSynthesis","synth","utteranceRef","speak","useCallback","text","options","utterance","stop","useToggle","initialValue","value","setValue","toggle","prev","FadingBG","rows","cols","dotSize","dotColor","animationDuration","boxes","gsap","jsxs","jsx","_","NameScroller","title","shadowSize","shadowColor","textColor","numberOfRows","baseDuration","className","rowRefs","parseColor","colorString","color","opacity","getShadowStyles","size","shadowTemplates","colorMap","shadowTemplate","finalColor","colorName","scale","baseColor","hex","r","g","b","getTextColor","row","index","totalWidth","duration","x","textSet","idx","rowIndex","el"],"mappings":"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"}